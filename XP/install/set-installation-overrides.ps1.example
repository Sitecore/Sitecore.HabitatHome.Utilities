Param(
    [string] $configurationFile = "configuration-xp0.json",
    [string] $prefix = "habitathome",
    [string] $assetsJsonPath = "assets.json"
)

# Replace the values in this file with your installation Overrides
# all objects in the install-settings.json file can be overridden in this file

# You can remove any items that you do not need to override. Keep in mind the dependency on other settings when removing items.
# For example, $assets is used in various sections.

Write-Host "Setting Local Overrides in $configurationFile"

$json = Get-Content -Raw $configurationFile |  ConvertFrom-Json

# Assets and prerequisites
$assets = $json.assets
$assets.licenseFilePath = Join-Path $assets.packageRepository "license.xml"

# Settings

# Site Settings
$site = $json.settings.site
$site.prefix = $prefix
$site.suffix = "dev.local"
$site.webroot = "C:\inetpub\wwwroot"
$site.hostName = $json.settings.site.prefix + "." + $json.settings.site.suffix

# Sitecore Parameters
$sitecore = $json.settings.sitecore
$sitecore.adminPassword = "b"
$sitecore.exmCryptographicKey = "0x0000000000000000000000000000000000000000000000000000000000000000"
$sitecore.exmAuthenticationKey = "0x0000000000000000000000000000000000000000000000000000000000000000"
$sitecore.telerikEncryptionKey = "PutYourCustomEncryptionKeyHereFrom32To256CharactersLong"

# Solr Parameters
$solr = $json.settings.solr
$solr.url = "https://localhost:8750/solr"
$solr.root = "c:\solr\solr-7.5.0"
$solr.serviceName = "Solr-7.5.0"

# SQL Settings
$sql = $json.settings.sql

$SqlSaPassword = "Str0NgPA33w0rd!!"
$SqlStrongPassword = $SqlSaPassword # Used for all other services
$sql.server = "."
$sql.adminUser = "sa"

# #### EXAMPLE additional bindings
# $otherAdditionalBinding = [ordered]@{
#     hostName = "otherexample.dev.local"
#     createCertificate = $false
#     port = 443
# }
# $otherAdditionalBinding = $otherAdditionalBinding | ConvertTo-Json
# $site.additionalBindings += (ConvertFrom-Json -InputObject $otherAdditionalBinding)

##### You should not need to modify settings below

$sql.adminPassword = $SqlSaPassword
$sql.userPassword = $SqlStrongPassword
$sql.coreUser =  "coreuser"
$sql.corePassword = $SqlStrongPassword
$sql.masterUser =  "masteruser"
$sql.masterPassword = $SqlStrongPassword
$sql.webUser =  "webuser"
$sql.webPassword = $SqlStrongPassword
$sql.collectionUser =  "collectionuser"
$sql.collectionPassword = $SqlStrongPassword
$sql.reportingUser =  "reportinguser"
$sql.reportingPassword = $SqlStrongPassword
$sql.processingEngineUser =  "processingengineuser"
$sql.processingEnginePassword = $SqlStrongPassword
$sql.processingPoolsUser =  "poolsuser"
$sql.processingPoolsPassword = $SqlStrongPassword
$sql.processingTasksUser =  "tasksuser"
$sql.processingTasksPassword = $SqlStrongPassword
$sql.referenceDataUser =  "referencedatauser"
$sql.referenceDataPassword = $SqlStrongPassword
$sql.marketingAutomationUser =  "marketingautomationuser"
$sql.marketingAutomationPassword = $SqlStrongPassword
$sql.formsUser =  "formsuser"
$sql.formsPassword = $SqlStrongPassword
$sql.exmMasterUser =  "exmmasteruser"
$sql.exmMasterPassword = $SqlStrongPassword
$sql.messagingUser =  "messaginguser"
$sql.messagingPassword = $SqlStrongPassword
$sql.securityuser =  "securityuser"
$sql.securityPassword = $SqlStrongPassword

# XConnect Parameters
$xConnect = $json.settings.xConnect
$xConnect.siteName = $site.prefix + "_xconnect." + $site.suffix
$xConnect.siteRoot = Join-Path $site.webRoot -ChildPath $xConnect.siteName

# IdentityServer Parameters
$identityServer = $json.settings.identityServer
$identityServer.packagePath = Join-Path $assets.packageRepository $("Sitecore.IdentityServer " + $assets.identityServerVersion + " (OnPrem)_identityserver.scwdp.zip")
$identityServer.name = $site.prefix + "-identityserver." + $site.suffix
$identityServer.url = ("https://{0}" -f $identityServer.name)
$identityServer.clientSecret = "ClientSecret"

Write-Host "Setting modules parameters in $configurationFile"
# Modules

Function Reset-Path {
    param(
        $module,
        $root
    )
    $module.fileName = (Join-Path $root ("\modules\{0}" -f $module.fileName))
}

$modulesConfig = Get-Content $assetsJsonPath -Raw  -Encoding Ascii |  ConvertFrom-Json
$modules = $json.modules
$sitecore = $modulesConfig.sitecore

$config = @{
    id          = $sitecore.id
    name        = $sitecore.name
    fileName    = Join-Path $assets.packageRepository ("\{0}" -f $sitecore.fileName)
    url         = $sitecore.url
    extract     = $sitecore.extract
    source      = $sitecore.source
    databases   = $sitecore.databases
}
$config = $config| ConvertTo-Json
$modules += (ConvertFrom-Json -InputObject $config)

foreach ($module in $modulesConfig.modules) {
    Reset-Path $module $assets.packageRepository
}
$modules += $modulesConfig.modules

$json.modules = $modules

Set-Content $configurationFile  (ConvertTo-Json -InputObject $json -Depth 6)
